#!/bin/bash -e

usage()
{
	echo 'Usage: dfhack-configure [os] [bits] [mode] [cmake args...]' >&2
	echo 'os: windows' >&2
	echo 'bits: 32 or 64' >&2
	echo 'mode: Release or RelWithDebInfo' >&2
}

if [[ $# -lt 3 ]]; then
	usage
	exit 1
fi

os=$1
bits=$2
mode=$3
shift 3

if [[ -z "$CCACHE_BASEDIR" ]] || [[ ! -d "$CCACHE_BASEDIR" ]]; then
	echo "The environment variable CCACHE_BASEDIR should be set to the closest parent directory of the source and build directories." >&2
	exit 2
fi

case $os in
windows)
	;;
*)
	usage
	exit 1
	;;
esac

case $bits in
32|64)
	;;
*)
	usage
	exit 1
	;;
esac

if [[ ! -z "$CCACHE_READONLY" ]]; then
	# Not worth copying all this stuff just for a single build.
	# # see https://github.com/frerich/clcache/issues/313
	# cp -R "$CCACHE_DIR/clcache" "$CCACHE_TEMPDIR/clcache"
	echo "export CLCACHE_DIR='$(winepath -w "$CCACHE_TEMPDIR/clcache")'" > dfhack-clcache-env.sh
else
	echo "export CLCACHE_DIR='$(winepath -w "$CCACHE_DIR/clcache")'" > dfhack-clcache-env.sh
fi
echo "export CLCACHE_BASEDIR='$(winepath -w "$CCACHE_BASEDIR")'" >> dfhack-clcache-env.sh
cat "/home/buildmaster/vcvars_$bits.bash" >> dfhack-clcache-env.sh

case $mode in
Release)
	;;
RelWithDebInfo)
	echo "* forcing build mode to Release" >&2
	mode=Release
	;;
*)
	usage
	exit 1
	;;
esac

if [[ ! -z "$DFHACK_USE_NINJA" ]]; then
	args="-G Ninja $args"
fi

args=" -DCMAKE_TOOLCHAIN_FILE=/home/buildmaster/toolchain.cmake -DDFHACK_BUILD_ARCH=$bits -DCMAKE_BUILD_TYPE=$mode -DCMAKE_LINKER=/usr/local/bin/link -DDFHACK_NATIVE_BUILD_DIR=/home/buildmaster/dfhack-native $args"

. dfhack-clcache-env.sh

cmake $args "$@" <&1

wineserver -w
