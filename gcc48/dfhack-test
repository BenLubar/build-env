#!/bin/bash -e

usage()
{
	echo 'Usage: dfhack-test [os] [bits] [command]' >&2
	echo 'os: linux or macosx' >&2
	echo 'bits: 32 or 64' >&2
	echo 'command: DFHack command to use as the test runner; for example, test/main' >&2
	echo '(run inside the DF folder)' >&2
}

if [[ $# -ne 3 ]]; then
	usage
	exit 1
fi

os=$1
bits=$2
script=$3
shift 3

if [[ "$os" != "linux" ]] || [[ "$bits" != "64" ]]; then
	echo '[temporary] Skipping tests for all platforms other than 64-bit Linux.'
	exit 0
fi

sed -e 's/\[SOUND:YES\]/[SOUND:NO]/' -i data/init/init.txt
sed -e 's/\[INTRO:YES\]/[INTRO:NO]/' -i data/init/init.txt
sed -e 's/\[PRINT_MODE:[A-Z0-9]\+\]/[PRINT_MODE:TEXT]/' -i data/init/init.txt
echo "$script" > dfhack.init
rm -f libs/libstdc++.so.6 # silence a warning when this gets deleted by DFHack

had_error=0

get_test_stage()
{
	if [[ -f test_stage.txt ]]; then
		cat test_stage.txt
	else
		echo 0
	fi
}

run_tests()
{
	rm -f test_stage.txt

	max_tries=5

	for (( tries=1; ; tries++ )) do
		stage="$(get_test_stage)"
		echo "Run #$tries: stage=$stage"

		if [[ "$stage" == done ]]; then
			echo Done\!
			rm -f test_stage.txt
			return 0
		fi

		if [[ $tries -gt $max_tries ]]; then
			echo Too many tries - aborting >&2
			return 1
		fi

		DFHACK_HEADLESS=1 DFHACK_DISABLE_CONSOLE=1 TERM=dumb script -efq -c 'xvfb-run -a timeout --foreground --preserve-status -k 310s 300s ./dfhack > /dev/null 2>&1'
		dfhack_exit_code=$?
		if [[ $dfhack_exit_code -ne $(( 666 % 256 )) ]]; then
			echo DFHack exited with code $dfhack_exit_code >&2
		fi
	done | while read -r line; do
		fd=1
		# lines containing light red text go to stderr
		if [[ "$line" == *$'\x1b[01;31m'* ]]; then
			fd=2
		fi
		perl -pe 's/\r//g and s/\x1b\[[0-9;]+m//g' <<<"$line" >&$fd
	done
}

run_tests || { echo run_tests failed with code $? >&2; had_error=1; }

exit $had_error
